#!/usr/bin/env node
"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
require("source-map-support/register");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk_nag_1 = require("cdk-nag");
const backend_stack_1 = require("../lib/backend-stack");
const backend_stack_aurora_1 = require("../lib/backend-stack-aurora");
// NOTE: due to an inherent issue with pipelines package, Aspects will not
// visit constructs in nested stages, so each stage has to manage checks and
// in order to generate nag reports we need to run `cdk synth '**'`.
const app = new aws_cdk_lib_1.App();
new backend_stack_1.BackendStack(app, "BackendStack");
new backend_stack_aurora_1.BackendStackAurora(app, "BackendStackAurora");
aws_cdk_lib_1.Aspects.of(app).add(new cdk_nag_1.AwsSolutionsChecks({ verbose: true }));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHFFQUFxRTs7QUFFckUsdUZBQXVGO0FBQ3ZGLHdGQUF3RjtBQUN4RixxRkFBcUY7QUFDckYscUZBQXFGO0FBQ3JGLDZEQUE2RDtBQUU3RCxzRkFBc0Y7QUFDdEYsZ0ZBQWdGO0FBQ2hGLHFGQUFxRjtBQUNyRixvRkFBb0Y7QUFDcEYsaUZBQWlGO0FBQ2pGLHlEQUF5RDtBQUd6RCx1Q0FBcUM7QUFFckMsNkNBQTJDO0FBQzNDLHFDQUE2QztBQUM3Qyx3REFBb0Q7QUFDcEQsc0VBQWlFO0FBRWpFLDBFQUEwRTtBQUMxRSw0RUFBNEU7QUFDNUUsb0VBQW9FO0FBRXBFLE1BQU0sR0FBRyxHQUFHLElBQUksaUJBQUcsRUFBRSxDQUFDO0FBQ3RCLElBQUksNEJBQVksQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDdEMsSUFBSSx5Q0FBa0IsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztBQUVsRCxxQkFBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSw0QkFBa0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXHJcblxyXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpc1xyXG4vLyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmVcclxuLy8gd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxyXG4vLyBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXHJcbi8vIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzby5cclxuXHJcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcclxuLy8gSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcclxuLy8gUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxyXG4vLyBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cclxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXHJcbi8vIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG5cclxuXHJcbmltcG9ydCBcInNvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3RlclwiO1xyXG5cclxuaW1wb3J0IHsgQXBwLCBBc3BlY3RzIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XHJcbmltcG9ydCB7IEF3c1NvbHV0aW9uc0NoZWNrcyB9IGZyb20gXCJjZGstbmFnXCI7XHJcbmltcG9ydCB7IEJhY2tlbmRTdGFjayB9IGZyb20gXCIuLi9saWIvYmFja2VuZC1zdGFja1wiO1xyXG5pbXBvcnQgeyBCYWNrZW5kU3RhY2tBdXJvcmEgfSBmcm9tIFwiLi4vbGliL2JhY2tlbmQtc3RhY2stYXVyb3JhXCI7XHJcblxyXG4vLyBOT1RFOiBkdWUgdG8gYW4gaW5oZXJlbnQgaXNzdWUgd2l0aCBwaXBlbGluZXMgcGFja2FnZSwgQXNwZWN0cyB3aWxsIG5vdFxyXG4vLyB2aXNpdCBjb25zdHJ1Y3RzIGluIG5lc3RlZCBzdGFnZXMsIHNvIGVhY2ggc3RhZ2UgaGFzIHRvIG1hbmFnZSBjaGVja3MgYW5kXHJcbi8vIGluIG9yZGVyIHRvIGdlbmVyYXRlIG5hZyByZXBvcnRzIHdlIG5lZWQgdG8gcnVuIGBjZGsgc3ludGggJyoqJ2AuXHJcblxyXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XHJcbm5ldyBCYWNrZW5kU3RhY2soYXBwLCBcIkJhY2tlbmRTdGFja1wiKTtcclxubmV3IEJhY2tlbmRTdGFja0F1cm9yYShhcHAsIFwiQmFja2VuZFN0YWNrQXVyb3JhXCIpO1xyXG5cclxuQXNwZWN0cy5vZihhcHApLmFkZChuZXcgQXdzU29sdXRpb25zQ2hlY2tzKHsgdmVyYm9zZTogdHJ1ZSB9KSk7XHJcbiJdfQ==